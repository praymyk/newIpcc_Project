<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ipcc.common.mapper.AgentMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="AgentAuth" type="AgentAuth">
        <id property="agentId" column="id"/>
        <result property="authType" column="auth_type"/>
        <result property="agentPw" column="password"/>
        <result property="agentName" column="username"/>
    </resultMap>

    <!-- 상담원 정보 테이블 -->
    <resultMap id="Agent" type="Agent">
        <!-- ID 필드 (PK) -->
        <id property="agtNo" column="AGT_NO"/>
        <!-- 상담원 정보 매핑 -->
        <result property="agtId" column="AGT_ID"/>
        <result property="custId" column="CUST_ID"/>
        <result property="agtPw" column="AGT_PW"/>
        <result property="agtExt" column="AGT_EXT"/>
        <result property="agtName" column="AGT_NAME"/>
        <result property="agtGroup" column="AGT_GROUP"/>
        <result property="agtTeam" column="AGT_TEAM"/>
        <result property="agtAuth" column="AGT_AUTH"/>
        <result property="phonePw" column="PHONE_PW"/>
        <result property="enrollDate" column="ENROLL_DATE"/>
        <result property="unrollDate" column="UNROLL_DATE"/>
        <result property="useAfter" column="USE_AFTER"/>
        <result property="useCallBack" column="USE_CALLBACK"/>
        <result property="state" column="STATE"/>
    </resultMap>

    <!-- 상담원 이벤트 로그 -->
    <resultMap id="AgentEventLog" type="AgentEventLog">
        <id property="eventId" column="EVENT_ID"/>
        <result property="custId" column="CUST_ID"/>
        <result property="agentExt" column="AGENT_EXT"/>
        <result property="agentName" column="AGENT_NAME"/>
        <result property="cid" column="CID"/>
        <result property="did" column="DID"/>
        <result property="inOut" column="INOUT"/>
        <result property="eventName" column="EVENT_NAME"/>
        <result property="timeStart" column="TIME_START"/>
        <result property="timeUse" column="TIME_USE"/>
        <result property="timeEnd" column="TIME_END"/>
        <result property="ipAddress" column="IP_ADDRESS"/>
    </resultMap>

    <!-- 상담원 모니터링 테이블 -->
    <resultMap id="AgentMon" type="AgentMon">
        <id property="custId" column="CUST_ID"/>
        <result property="agentExt" column="AGT_EXT"/>
        <result property="did" column="DID"/>
        <result property="cid" column="CID"/>
        <result property="agentName" column="AGT_NAME"/>
        <result property="divInOut" column="DIV_INOUT"/>
        <result property="divStat" column="DIV_STAT"/>
        <result property="timeStart" column="TIME_START"/>
        <result property="divLogin" column="DIV_LOGIN"/>
        <result property="stackLogin" column="STACK_LOGIN"/>
        <result property="stackOut" column="STACK_OUT"/>
        <result property="stackIn" column="STACK_IN"/>
        <result property="sipUrl" column="SIP_URL"/>
        <result property="resetTime" column="RESET_TIME"/>
    </resultMap>

    <!-- 상담원 상태 조회 (모니터링) -->
    <select id="selectAgentStatus" parameterType="Agent" resultMap="AgentMon" >
        SELECT *
        FROM agent_mon
        WHERE CUST_ID = #{ccode};
    </select>

    <!-- 현재 상담원 상태 조회 -->
    <select id="currentAgentEvent" parameterType="String" resultMap="AgentEventLog">
        SELECT *
        FROM agent_log
        WHERE AGENT_EXT = #{agentExt}
          AND TIME_END IS NULL
        ORDER BY TIME_START DESC
            LIMIT 1;
    </select>

    <!-- 상담원 리스트 조회 (상담원 관리 메뉴) -->
    <select id="selectAgentList" resultMap="Agent">
        SELECT *
        FROM crm_agent
        WHERE CUST_ID = #{custId}

        <!-- 검색어가 있을 경우 -->
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (AGT_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
            OR AGT_EXT LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>

        <!-- 정렬 기준 적용 -->
        ORDER BY
        <choose>
            <!-- 검색 조건이 없을 경우 AGT_NO 기본 오름차순 정렬 -->
            <when test="orderBy == null or orderBy == ''">
                AGT_NO ASC
            </when>
            <!-- 검색 조건이 있을 경우 선택한 필드로 정렬 -->
            <when test="orderBy == 'agtName'"> AGT_NAME </when>
            <when test="orderBy == 'agtExt'"> AGT_EXT </when>
            <when test="orderBy == 'agtGroup'"> AGT_GROUP </when>
            <when test="orderBy == 'agtTeam'"> AGT_TEAM </when>
            <when test="orderBy == 'agtAuth'"> AGT_AUTH </when>
            <when test="orderBy == 'useAfter'"> USE_AFTER </when>
            <when test="orderBy == 'useCallBack'"> USE_CALLBACK </when>
            <otherwise> AGT_NO </otherwise>  <!-- 기본적으로 AGT_NO 사용 -->
        </choose>

        <!-- 오름차순 또는 내림차순 적용 -->
        <choose>
            <when test="orderDirection != null and orderDirection == 'ASC'"> ASC </when>
            <otherwise> DESC </otherwise> <!-- 기본값은 내림차순 -->
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>
    <!-- 상담원 리스트 숫자 조회 (카운팅용) -->
    <select id="countAgentList" resultType="int">
        SELECT COUNT(*)
        FROM crm_agent
        WHERE CUST_ID = #{custId}
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (AGT_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
            OR AGT_EXT LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>
    </select>

    <!-- 상담원 등록 -->
    <insert id="addAgent" parameterType="Agent" useGeneratedKeys="true" keyProperty="agtNo">
        INSERT INTO crm_agent(AGT_ID,
                              CUST_ID,
                              AGT_PW,
                              AGT_EXT,
                              AGT_NAME,
                              AGT_GROUP,
                              AGT_TEAM,
                              AGT_AUTH,
                              USE_AFTER,
                              USE_CALLBACK)
        VALUES (#{agtId},
                #{custId},
                #{agtPw},
                #{agtExt},
                #{agtName},
                #{agtGroup},
                #{agtTeam},
                #{agtAuth},
                #{useAfter},
                #{useCallBack});
    </insert>
    <update id="updateAgentId" parameterType="Agent">
        UPDATE crm_agent
        SET AGT_ID = #{agtId}
        WHERE AGT_NO = #{agtNo};
    </update>

    <!-- 상담원 정보 수정용 -->
    <update id="updateAgent" parameterType="Agent">
        UPDATE crm_agent
        SET AGT_ID = #{agtId},
            AGT_PW = #{agtPw},
            AGT_EXT = #{agtExt},
            AGT_NAME = #{agtName},
            AGT_GROUP = #{agtGroup},
            AGT_TEAM = #{agtTeam},
            AGT_AUTH = #{agtAuth},
            USE_AFTER = #{useAfter},
            USE_CALLBACK = #{useCallBack}
        WHERE AGT_NO = #{agtNo};
    </update>
    <!-- 상담원 정보 업데이트 시 내선 번호 중복 검사 -->
    <select id="checkAgentExt" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM crm_agent
        WHERE AGT_EXT = #{agtExt}
        AND AGT_NO != #{agtNo};
    </select>
    <!-- Endpoints 내선번호 등록 -->
    <insert id="insertEndpoint" parameterType="String">
        INSERT INTO asterisk.ps_endpoints (id, aors, auth, outbound_auth, callerid)
        SELECT #{agtExt}, #{agtExt}, #{agtExt}, #{agtExt}, #{agtExt}
        FROM dual
        WHERE NOT EXISTS (
            SELECT 1
            FROM asterisk.ps_endpoints
            WHERE id = #{agtExt}
        );
    </insert>
    <!--ps_aors 내선번호 등록 -->
    <insert id="insertAors" parameterType="String">
        INSERT INTO asterisk.ps_aors (id)
        SELECT #{agtExt}
        FROM dual
        WHERE NOT EXISTS (
            SELECT 1
            FROM asterisk.ps_aors
            WHERE id = #{agtExt}
        );
    </insert>
    <!--ps_auth 내선번호 등록 -->
    <insert id="insertAuths" parameterType="String">
        INSERT INTO asterisk.ps_auths (id, username)
        SELECT #{agtExt}, #{agtExt}
        FROM dual
        WHERE NOT EXISTS (
            SELECT 1
            FROM asterisk.ps_auths
            WHERE id = #{agtExt}
        );
    </insert>

    <!-- 상담원 상태 전환용 (정지/해제) -->
    <update id="toggleAgentState" parameterType="Agent">
        UPDATE crm_agent
        SET STATE = CASE
                        WHEN STATE = 'N' THEN 'Y'
                        ELSE 'N'
            END,
            AGT_EXT = "미할당"
        WHERE AGT_ID = #{agtId};
    </update>
    <!-- 상담원 리스트 부가기능 조정 -->
    <update id="updateAgentList">
        UPDATE crm_agent
        SET ${field} = #{value}
        WHERE AGT_NO IN
        <foreach item="id" collection="agtNos" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


    <!-- 상담원 조회 (로그인 용)-->
    <select id="selectAgent" parameterType="Agent" resultMap="Agent">
        SELECT *
        FROM crm_agent
        WHERE AGT_ID = #{agtId} and AGT_PW = #{agtPw} and CUST_ID = #{custId};
    </select>

    <!-- 상담원 로그인/아웃 이벤트 등록 -->
    <insert id="insertAgentLogInOutEvent" parameterType="AgentEventLog">
        INSERT INTO agent_log (AGENT_EXT,
                               CUST_ID,
                               AGENT_NAME,
                               EVENT_NAME,
                               TIME_START,
                               TIME_END)
        VALUES (#{agentExt}, #{custId}, #{agentName}, #{eventName}, NOW(), NOW());
    </insert>

    <!-- 상담원 이벤트 로그 등록(NEW) -->
    <insert id="insertAgentEvent" parameterType="AgentEventLog">
        INSERT INTO agent_log (AGENT_EXT,
                               CUST_ID,
                               AGENT_NAME,
                               CID,
                               DID,
                               DIV_INOUT,
                               EVENT_NAME,
                               TIME_START)
        VALUES (#{agentExt}, #{custId}, #{agentName}, #{cid}, #{did}, #{divInOut}, #{eventName}, NOW());
    </insert>

    <!-- 상담원 이벤트 로그 update -->
    <update id="updateAgentEvent" parameterType="AgentEventLog">
        UPDATE agent_log
        SET TIME_USE = TIMESTAMPDIFF(SECOND, TIME_START, NOW()),
            TIME_END = NOW()
        WHERE TIME_END IS NULL
        AND AGENT_EXT = #{agentExt};
    </update>

    <!-- 상담원 상태 변경시 상담원 모니터링 테이블 insert/update -->
    <insert id="updateAgentMon" parameterType="AgentMon">
        INSERT INTO agent_mon (CUST_ID, AGT_EXT, DID, CID, AGT_NAME, DIV_INOUT, DIV_STAT, TIME_START, DIV_LOGIN, SIP_URL)
        VALUES (#{custId}, #{agentExt}, #{did}, #{cid}, #{agentName},#{divInOut}, #{divStat}, NOW(), #{divLogin}, CONCAT(#{agentName}, '@praymyk.co.kr'))
            ON DUPLICATE KEY UPDATE
                                 CUST_ID = VALUES(CUST_ID),
                                 DID = VALUES(DID),
                                 CID = VALUES(CID),
                                 AGT_NAME = VALUES(AGT_NAME),
                                 DIV_INOUT = VALUES(DIV_INOUT),
                                 DIV_STAT = VALUES(DIV_STAT),
                                 TIME_START = VALUES(TIME_START),
                                 DIV_LOGIN = VALUES(DIV_LOGIN)
    </insert>

    
    <!-- 상담원 현황(모니터링) 조회용 select-->
    <select id="selectAgentListStatus" parameterType="String" resultType="com.ipcc.manager.model.dto.agent.AgentListStatus">
        SELECT
            COUNT(*) AS totalAgents,
            SUM(CASE WHEN DIV_STAT = 'Ready' THEN 1 ELSE 0 END) AS readyAgents,
            SUM(CASE WHEN DIV_STAT = 'Processing' THEN 1 ELSE 0 END) AS afterAgents,
            SUM(CASE WHEN DIV_STAT = 'Rest' THEN 1 ELSE 0 END) AS restAgents,+
            SUM(CASE WHEN DIV_STAT = 'Preparing' THEN 1 ELSE 0 END) AS etcAgent,
            SUM(CASE WHEN DIV_LOGIN = 'on' THEN 1 ELSE 0 END) AS loginAgents,
            SUM(CASE WHEN DIV_INOUT = 'in' THEN 1 ELSE 0 END) AS inCallAgents,
            SUM(CASE WHEN DIV_INOUT = 'out' THEN 1 ELSE 0 END) AS outCallAgents
            FROM agent_mon
            WHERE CUST_ID = #{ccode};
    </select>

    <!-- 상담원 현황(모니터링 조회용 select2) -->
    <select id="selectTodayCallStatus" parameterType="String" resultType="com.ipcc.manager.model.dto.agent.TodayCallStatus">
        SELECT
            SUM(CASE WHEN DIV_INOUT = 'out' AND EVENT_NAME = 'Try' THEN 1 ELSE 0 END) AS outCallTry,
            SUM(CASE WHEN DIV_INOUT = 'out' AND EVENT_NAME ='OnCall' THEN 1 ELSE 0 END) AS outCall,
            SUM(CASE WHEN DIV_INOUT = 'in' AND EVENT_NAME = 'Try' THEN 1 ELSE 0 END) AS totalCall,
            SUM(CASE WHEN DIV_INOUT = 'in' AND EVENT_NAME = 'Try' THEN 1 ELSE 0 END) AS watingCall,
            SUM(CASE WHEN DIV_INOUT = 'in' AND EVENT_NAME ='OnCall' THEN 1 ELSE 0 END) AS responseCall,
            SUM(CASE WHEN DIV_INOUT = 'in' AND (EVENT_NAME = 'Canceled' OR EVENT_NAME = 'Rejected') THEN 1 ELSE 0 END) AS abandonCall
            FROM agent_log
            WHERE CUST_ID = #{ccode}
            AND DATE(TIME_START) = CURDATE();
    </select>


</mapper>